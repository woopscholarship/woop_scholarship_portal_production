// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String               @id
  email           String               @unique
  userType        UserType
  displayName     String
  profileImageUrl String
  approvalStatus  ApprovalStatus       @default(PENDING)
  userDetails     PersonalInformation?
  registeredOn    DateTime             @default(now())

  // SPONSOR FIELDS
  scholarshipProgram ScholarshipProgram[]

  // STUDENT FIELDS
  scholarshipApplications StudentApplication[]
  activityLogs            ActityLog[]
}

model PersonalInformation {
  id                   String               @id @default(uuid())
  firstName            String
  middleName           String?
  lastName             String
  maritalStatus        MaritalStatus?
  gender               Gender?
  dateOfBirth          String
  nationality          String?
  phoneNumber          String
  relationship         RelationshipInfo?
  reasonForApplication String
  validIdUrl           String?
  facebookUrl          String?
  academicInformation  AcademicInformation?

  // Address Properties
  currentAddress      String
  currentCity         String
  currentState        String
  currentCountry      String
  currentPostalCode   String
  permanentAddress    String
  permanentCity       String
  permanentState      String
  permanentCountry    String
  permanentPostalCode String

  // USER REFERENCE
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model AcademicInformation {
  id String @id @default(uuid())

  currentSchoolAddress   String
  currentSchool          String
  currentEducationLevel  DegreeLevel
  currentCourse          String
  previousSchoolAddress  String?
  previousSchoolAttended String?
  previousEducationLevel DegreeLevel?
  desiredCourse          String?

  user       PersonalInformation @relation(fields: [userInfoId], references: [id])
  userInfoId String              @unique
}

model RelationshipInfo {
  id               String  @id @default(uuid())
  motherFirstName  String?
  motherLastName   String?
  motherOccupation String?
  motherPhone      String?
  fatherFirstName  String?
  fatherLastName   String?
  fatherPhone      String?
  fatherOccupation String?

  // PERSONAL INFORMATION REFERENCE
  personalInformation PersonalInformation @relation(fields: [personalInfoId], references: [id])
  personalInfoId      String              @unique
}

model ScholarshipProgram {
  id              String               @id @default(uuid())
  name            String               @unique
  description     String
  postedOn        DateTime             @default(now())
  degreeLevel     DegreeLevel
  scholarshipType ScholarshipType
  programType     ProgramType
  maxApplicants   Int
  status          ProgramStatus
  reviewStatus    ApprovalStatus       @default(PENDING)
  applicants      StudentApplication[]

  address     String
  city        String
  state       String
  country     String
  email       String?
  phoneNumber String?
  website     String?

  // Additional Form Inputs when Applying For Grant
  typeOfGrantApplication    String?
  reasonForGrantApplication String?
  reasonWhyYourDeserveGrant String?
  ScholarshipForWhatLocation String?

  // SPONSOR USER REFERENCE
  sponsorUser   User?   @relation(fields: [sponsorUserId], references: [id])
  sponsorUserId String?
}

model StudentApplication {
  id              String         @id @default(uuid())
  status          ApprovalStatus @default(PENDING)
  appliedOn       DateTime       @default(now())
  reason          String
  videoReasonLink String?

  // STUDENT USER REFERENCE
  studentUser   User   @relation(fields: [studentUserId], references: [id])
  studentUserId String

  // SCHOLARSHIP PROGRAM REFERENCE
  scholarshipProgram   ScholarshipProgram? @relation(fields: [scholarshipProgramId], references: [id])
  scholarshipProgramId String?
}

model ActityLog {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
}

enum ScholarshipType {
  ACADEMIC
  SPORTS
  ESSAY
  OTHER
}

enum DegreeLevel {
  ASSOCIATE
  BACHELORS
  MASTERS
  DOCTORAL
}

enum ProgramStatus {
  OPEN
  CLOSED
}

enum UserType {
  ADMIN
  SPONSOR
  STUDENT
}

enum ApprovalStatus {
  REJECTED
  PENDING
  APPROVED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum Gender {
  MALE
  FEMALE
}

enum ProgramType {
  GRANT
  SCHOLARSHIP
}

enum AcademicStatus {
  ENROLLED
  NOT_ENROLLED
}
